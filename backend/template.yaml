AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RecallAssistant-Backend

  SAM Template for RecallAssistant Backend

Globals:
  Function:
    Timeout: 20
    Runtime: nodejs14.x
    Handler: app.lambdaHandler

Resources:
  # Add notion Queue
  AddNotionQueue:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: False
      ReceiveMessageWaitTimeSeconds: 20
      QueueName: AddNotionQueue

  # Add notion Queue
  UpdateNotionQueue:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: False
      ReceiveMessageWaitTimeSeconds: 20
      QueueName: UpdateNotionQueue

  # Add notion bucket
  NotionsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: recallassistant-notions

  # API Gateway
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RecallAssistantAPI
      StageName: dev3
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'api.json'
      Auth:
        Authorizers:
          BasicAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 3600
        DefaultAuthorizer: BasicAuthorizer

  # CORS Lambda
  CORSLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotionCORSFunction
      CodeUri: cors/
      Events:
        CORSNotionApi:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref APIGateway
            Path: /notion
            Method: options

  # Api GW Role
  ApiGWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowSqsIntegration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:SendMessageBatch'
                Resource: !GetAtt AddNotionQueue.Arn

  # Lambda API Role
  LambdaNotionApiRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RecallAssistantLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt AddNotionQueue.Arn
                Effect: Allow
              - Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt UpdateNotionQueue.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Lambda Authorizer
  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotionAuthorizerFunction
      CodeUri: authorizer/
      Environment:
        Variables:
          username: "{{resolve:ssm:recallassistant-username}}"
          password: "{{resolve:ssm:recallassistant-password}}"

  # Add Notion API Lambda
  AddNotionApiFunctionSQS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AddNotionApiFunctionSQS
      Role: !GetAtt LambdaNotionApiRole.Arn
      CodeUri: add-notion/
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref NotionsBucket
      Events:
        AddNotionEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AddNotionQueue.Arn
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 30

  # Update Notion API Lambda
  UpdateNotionApiFunctionSQS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateNotionApiFunctionSQS
      Role: !GetAtt LambdaNotionApiRole.Arn
      CodeUri: update-notion/
      Policies:
        - S3FullAccessPolicy:
           BucketName: !Ref NotionsBucket
      Events:
        AddNotionEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UpdateNotionQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 20

  # Get Notion API Lambda
  GetNotionApiFunctionSQS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetNotionApiFunctionSQS
      Role: !GetAtt LambdaNotionApiRole.Arn
      CodeUri: get-notion/
      Events:
        GetNotionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /notion
            Method: get

Outputs:
  AddNotionApi:
    Description: "API Gateway endpoint URL for dev stage for GET Notion function"
    Value:
      Fn::Sub: https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev3/notion/
