AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RecallAssistant-Backend

  SAM Template for RecallAssistant Backend

Globals:
  Function:
    Timeout: 20
    Runtime: nodejs14.x
    Handler: app.lambdaHandler

Resources:
  # Add notion bucket
  NotionsBucket:
    Type: 'AWS::S3::Bucket'
    # DeletionPolicy: Retain
    Properties:
      BucketName: recallassistant-notions

  # API Gateway
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RecallAssistantAPI
      StageName: dev4
      Auth:
        Authorizers:
          BasicAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerLambda.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 3600
        DefaultAuthorizer: BasicAuthorizer

  # CORS Lambda
  CORSLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotionCORSLambda
      CodeUri: cors/
      Events:
        CORSNotionApi:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref APIGateway
            Path: /notion
            Method: options

  # Api GW Role
  ApiGWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  # Lambda API Role
  LambdaNotionApiRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: RecallAssistantLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 's3:*'
                Resource: !Sub
                  - "${BucketArn}/*"
                  - BucketArn: !GetAtt NotionsBucket.Arn
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Lambda Authorizer
  AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthorizerLambda
      CodeUri: authorizer/
      Environment:
        Variables:
          username: "{{resolve:ssm:recallassistant-username}}"
          password: "{{resolve:ssm:recallassistant-password}}"

  # Add Notion API Lambda
  AddNotionLambdaAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AddNotionLambdaAPI
      Role: !GetAtt LambdaNotionApiRole.Arn
      CodeUri: add-notion/
      Events:
        AddNotionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /notion
            Method: post

  # Get Notion API Lambda
  GetNotionLambdaAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetNotionLambdaAPI
      Role: !GetAtt LambdaNotionApiRole.Arn
      CodeUri: get-notion/
      Events:
        GetNotionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /notion
            Method: get

Outputs:
  AddNotionApi:
    Description: "API Gateway endpoint URL for dev stage for GET Notion function"
    Value:
      Fn::Sub: https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev4/notion/
